install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
install.packages(c("admisc", "av", "BayesFactor", "BH", "brew", "brio", "bslib", "Cairo", "checkmate", "cli", "cluster", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "DBI", "deldir", "desc", "deSolve", "diptest", "dplyr", "DT", "e1071", "emmeans", "extraDistr", "fansi", "foreign", "fpc", "future", "future.apply", "gert", "GGally", "ggdist", "ggrepel", "ggridges", "ggside", "ggthemes", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "huxtable", "igraph", "insight", "interp", "jsonlite", "later", "lavaan", "lpSolve", "magick", "maps", "markdown", "Matrix", "matrixStats", "mgcv", "mvtnorm", "network", "nleqslv", "nlme", "opdisDownsampling", "ordinal", "patchwork", "pcaPP", "pingr", "pkgbuild", "processx", "progress", "psych", "QuickJSR", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "rgl", "rJava", "rlang", "RobStatTM", "robustbase", "rpart", "rsconnect", "rstan", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "StanHeaders", "stringi", "svglite", "tensorA", "tesseract", "testthat", "tidygraph", "timeDate", "tinytex", "TMB", "tseries", "TTR", "ucminf", "units", "V8", "vctrs", "vipor", "vroom", "wk", "xgboost", "xml2", "yaml"))
detach("package:base", unload = TRUE)
library(tidyverse)
# Exemplo de carregamento de texto (substitua com seu próprio conjunto de dados)
textos <- c("Este é um exemplo de texto.",
"Neste exemplo, vamos criar um gráfico de bag of words usando R.",
"Bag of Words é uma técnica comum em processamento de linguagem natural.",
"Este é um exemplo de texto.",
"Neste exemplo, vamos criar um gráfico de bag of words usando R.")
# Pré-processamento do texto
library(tm)
corpus <- Corpus(VectorSource(textos))
corpus <- tm_map(corpus, content_transformer(tolower))  # Converter para minúsculas
corpus <- tm_map(corpus, removePunctuation)            # Remover pontuações
corpus <- tm_map(corpus, removeNumbers)                # Remover números
corpus <- tm_map(corpus, removeWords, stopwords("portuguese"))  # Remover stopwords
corpus <- tm_map(corpus, stripWhitespace)              # Remover espaços em branco desnecessários
# Criar a matriz de termos do documento (Bag of Words)
dtm <- DocumentTermMatrix(corpus)
# Converter a DTM em um data frame
dtm_df <- as.data.frame(as.matrix(dtm))
dtm_df$total <- rowSums(dtm_df)  # Adicionar uma coluna com a contagem total de palavras
# Ordenar as palavras pela contagem total
dtm_df <- dtm_df[order(dtm_df$total, decreasing = TRUE), ]
# Plotar as palavras mais frequentes
library(ggplot2)
# Número de palavras para exibir no gráfico (altere conforme necessário)
num_palavras <- 10
# Converter a DTM em um formato tidy
library(tidytext)
dtm_tidy <- tidy(dtm)
top_palavras <- dtm_tidy %>%
group_by(term) %>%
summarize(total = sum(count)) %>%
top_n(num_palavras, total) %>%
arrange(desc(total))
# Plotar o gráfico de barras
ggplot(top_palavras, aes(x = reorder(term, total), y = total)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Palavras", y = "Frequência", title = "Top Palavras no Bag of Words") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotar a nuvem de palavras
library(RColorBrewer)
library(wordcloud)
# Criar a nuvem de palavras
set.seed(123)  # Definir uma semente para a reprodução dos resultados
wordcloud(words = top_palavras$term, freq = top_palavras$total,
min.freq = 1, max.words = 100, random.order = FALSE,
colors = brewer.pal(8, "Dark2"))  # Definir cores (opcional)
library(wordcloud2)
# Converter top_palavras para um formato adequado para wordcloud2
# Aqui, assume-se que top_palavras tem as colunas 'term' e 'total' representando as palavras e suas frequências
top_palavras <- top_palavras[order(-top_palavras$total), ]  # Ordenar por frequência (do maior para o menor)
# Criar a nuvem de palavras
wordcloud2(data = top_palavras, size = 1, shape = "cloud")
View(dtm)
View(corpus)
install.packages(c("BayesFactor", "bayesplot", "coda", "commonmark", "cowplot", "data.table", "DBI", "digest", "emmeans", "fracdiff", "ggridges", "graphlayouts", "gt", "hardhat", "httpuv", "igraph", "insight", "interp", "kableExtra", "listenv", "MASS", "Matrix", "paletteer", "parameters", "pkgload", "plotly", "ps", "psych", "QuickJSR", "R.oo", "reprex", "reticulate", "rJava", "robustbase", "roxygen2", "rrcov", "rsconnect", "rstanarm", "rstantools", "sp", "tidygraph", "tidyr", "timechange", "uuid", "viridis", "withr", "xgboost", "xts", "zip"))
install.packages("rJava")
###Exemplo do Teorema do Limite Central (TLC):
#Simulação do TLC para a distribuição exponencial
# Definindo os parâmetros da distribuição exponencial
lambda <- 1  # parâmetro de taxa
# Definindo o tamanho da amostra
n <- 1000  # tamanho da amostra
# Simulando médias amostrais de uma distribuição exponencial
means <- replicate(10000, mean(rexp(n, lambda)))
# Plotando o histograma das médias amostrais
hist(means, breaks = 30, main = "Distribuição da Média Amostral (n=1000)",
xlab = "Média Amostral", ylab = "Frequência", col = "skyblue")
# Adicionando a densidade da distribuição normal
curve(dnorm(x, mean = lambda, sd = sqrt(1/n)), add = TRUE, col = "red", lwd = 2, lty = 2)
# Adicionando a densidade da distribuição normal
curve(dnorm(x, mean = lambda, sd = sqrt(1/n)), add = TRUE, col = "red", lwd = 2, lty = 2)
# Plotando o histograma das médias amostrais
hist(means, breaks = 30, main = "Distribuição da Média Amostral (n=1000)",
xlab = "Média Amostral", ylab = "Frequência", col = "skyblue")
# Adicionando a densidade da distribuição normal
curve(dnorm(x, mean = lambda, sd = sqrt(1/n)), add = TRUE, col = "red", lwd = 2, lty = 2)
means
830*8.5%
830*8,5%
(830*8.5)/100
((830*8.5)/100)/30*7
###Exemplo do Método de Bootstrap:
# Amostra de dados (exemplo: altura de uma população)
amostra <- c(170, 165, 172, 168, 175, 180, 162, 168, 178, 172)
# Função para calcular a média amostral
media_amostral <- function(x) {
return(mean(x))
}
# Número de reamostragens (bootstrap)
B <- 1000
# Realizando o bootstrap para estimar a distribuição da média amostral
bootstrap_means <- replicate(B, media_amostral(sample(amostra, replace = TRUE)))
# Calculando o intervalo de confiança de 95% usando percentis
lower <- quantile(bootstrap_means, 0.025)
upper <- quantile(bootstrap_means, 0.975)
# Exibindo o intervalo de confiança
cat("Intervalo de Confiança de 95% para a Média Amostral:", lower, "-", upper, "\n")
# Plotando o histograma das médias amostrais
hist(bootstrap_means, breaks = 30, main = "Distribuição da Média Amostral (Bootstrap)",
xlab = "Média Amostral", ylab = "Frequência", col = "lightgreen")
# Adicionando linhas para indicar o intervalo de confiança
abline(v = lower, col = "blue", lwd = 2)
abline(v = upper, col = "blue", lwd = 2)
# Amostra de dados (exemplo: altura de uma população)
amostra <- c(170, 165, 172, 168, 175, 180, 162, 168, 178, 172)
# Função para calcular a média amostral
media_amostral <- function(x) {
return(mean(x))
}
# Número de reamostragens (bootstrap)
B <- 1000
# Realizando o bootstrap para estimar a distribuição da média amostral
bootstrap_means <- replicate(B, mean(sample(amostra, replace = TRUE)))
# Calculando o intervalo de confiança de 95% usando percentis
lower <- quantile(bootstrap_means, 0.025)
upper <- quantile(bootstrap_means, 0.975)
# Exibindo o intervalo de confiança
cat("Intervalo de Confiança de 95% para a Média Amostral:", lower, "-", upper, "\n")
# Plotando o histograma das médias amostrais
hist(bootstrap_means, breaks = 30, main = "Distribuição da Média Amostral (Bootstrap)",
xlab = "Média Amostral", ylab = "Frequência", col = "lightgreen")
# Adicionando linhas para indicar o intervalo de confiança
abline(v = lower, col = "blue", lwd = 2)
abline(v = upper, col = "blue", lwd = 2)
read.csv
?read.csv
read.csv
library(tidyverse)
library(readxl)
setwd("/Users/lincoln/Library/CloudStorage/OneDrive-OiCorp/Green-Belt_SEREDE/aula5_Controle/Acompanhamento-KPI_Projeto-GB")
base <- readxl::read_excel("base.xlsx", sheet = "base")
base <- readxl::read_excel("base.xlsx", sheet = "BASE")
table(base)
base %>%
select(MES, UF) %>%
group_by(MES, UF) %>%
summarise(n = n())
base %>%
select(MES) %>%
group_by(MES) %>%
summarise(n = n())
base %>%
select(MES,`Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(), mean(`Média de %HE`))
styler:::style_active_pkg()
styler:::style_active_file()
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
mean(`Média de %HE`)*100)
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(mean(`Média de %HE`)*100), "%")
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(mean(`Média de %HE`)*100, "%"))
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(round(mean(`Média de %HE`)*100),2), "%"))
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(round(mean(`Média de %HE`)*100),2), "%")
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
round(paste(mean(`Média de %HE`)*100), "%"),2)
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(round(mean(`Média de %HE`)*100), "%",2))
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(round(mean(`Média de %HE`)*100), "%"))
base %>%
select(MES, `Média de %HE`) %>%
group_by(MES) %>%
summarise(n = n(),
paste(round(mean(`Média de %HE`)*100,2), "%"))
summary(base)
library(shiny); runApp('~/Documents/GitHub/meu_primeiro_shiny-dashboard/my_app_4/app4.R')
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
destfile <- "movies.RData"
download.file(file, destfile)
load("movies.RData")
View(movies)
ui <- fluidPage(
sidebarLayout(
# Inputs: Select variables to plot
sidebarPanel(
# Select variable for y-axis
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
# Select variable for x-axis
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
)
),
# Output: Show scatterplot
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
setwd("~/Documents/GitHub/meu_primeiro_shiny-dashboard/my_app_5")
setwd("~/Documents/GitHub/meu_primeiro_shiny-dashboard/my_app_5")
runApp('app5.R')
library(DBI)
con <- DBI::dbConnect(odbc::odbc(), Driver = "Actual SQL Server",
Server = "172.31.32.77", Database = "PCP", UID = rstudioapi::askForPassword("tr613422"),
PWD = rstudioapi::askForPassword("Serede123."), Port = 1433)
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
library(odbc)
library(DBI)
con <- DBI::dbConnect(odbc::odbc(), Driver = "Actual SQL Server",
Server = "172.31.32.77", Database = "PCP", UID = rstudioapi::askForPassword("tr613422"),
PWD = rstudioapi::askForPassword("Serede123."), Port = 1433)
install.package(odbc)
install.package("odbc")
install.packages("odbc")
library(DBI)
con <- DBI::dbConnect(odbc::odbc(), Driver = "Actual SQL Server",
Server = "172.31.32.77", Database = "PCP", UID = rstudioapi::askForPassword("tr613422"),
PWD = rstudioapi::askForPassword("Serede123."), Port = 1433)
library(DBI)
con <- DBI::dbConnect(odbc::odbc(), Driver = "Actual SQL Server",
Server = "172.31.32.77", Database = "PCP", UID = rstudioapi::askForPassword("tr613422"),
PWD = rstudioapi::askForPassword("Serede123."), Port = 1433)
odbcListDrivers()
DBI::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
gc()
gc()
